<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
               width="480" height="440" xmlns:views="ll.views.*" 
               applicationComplete="init()">
    <fx:Style>
        @namespace s "library://ns.adobe.com/flex/spark";
        @namespace mx "library://ns.adobe.com/flex/mx";
        @namespace views "ll.views.*";
        global {
            layoutDirection: "ltr";
        }
    </fx:Style>
    <s:states>
        <s:State name="default"/>
        <s:State name="inmatch"/>
        <s:State name="security"/>
    </s:states>
    <views:InMatchVideos
        id="_inMatchVideos"
        visible="false" includeInLayout="false"
        visible.inmatch="true" includeInLayout.inmatch="true"
        width="100%" height="100%"/>
    <views:SecurityClearance
        id="_securityClearance"
        visible="false" includeInLayout="false"
        visible.security="true" includeInLayout.security="true"
        complete="showInMatchVideos();" width="100%" height="100%"/>
    <fx:Script>
        <![CDATA[
            import ll.LocalStorage;
            import ll.Logger;
            import ll.StompWrapper;
            import ll.external.Config;
            import ll.external.OutgoingCalls;
            
            import org.codehaus.stomp.event.ConnectedEvent;
            
            private var _netConnection : NetConnection;

            private function init() : void {
                if (!LocalStorage.cleared)
                    showSecurityClearance();
                else
                    showInMatchVideos();
            }
            private function showSecurityClearance() : void {
                this.currentState = "security";
                _securityClearance.start();
                OutgoingCalls.stateChange(0);
            }
            private function showInMatchVideos() : void {
                this.currentState = "inmatch";
                OutgoingCalls.stateChange(1);
                StompWrapper.instance.addEventListener(
                    ConnectedEvent.CONNECTED, 
                    stompConnectSuccess);
                _netConnection = new NetConnection();
                _netConnection.addEventListener(
                    NetStatusEvent.NET_STATUS,
                    netConnectionHandler);
                _netConnection.connect(Config.cirrusUrl);
                Logger.log("Connecting to " + Config.cirrusUrl);
            }
            private function netConnectionHandler(event : NetStatusEvent) : void {
                Logger.log("NetConnection event: " + event.info.code);
                switch (event.info.code) {
                    case "NetConnection.Connect.Success":
                        connectSuccess();
                        break;
                    
                    case "NetConnection.Connect.Closed":
                        // TODO: do something here.
                        break;
                    
                    case "NetStream.Connect.Success":
                        // we get this when other party connects to our outgoing stream
                        Logger.log("Connection from: " + event.info.stream.farID);
                        break;
                    
                    case "NetConnection.Connect.Failed":
                        Logger.log("Unable to connect");
                        break;
                    
                    case "NetStream.Connect.Closed":
                        // TODO: possibly do something here.
                        break;
                }
            }
            private function stompConnectSuccess(event : ConnectedEvent) : void {
                notifyReady();
            }
            private function connectSuccess() : void {
                Logger.log("Connected, my ID: " + _netConnection.nearID);
                _inMatchVideos.start(_netConnection);
                notifyReady();
            }
            private function notifyReady() : void {
                Logger.log("notifyReady called");
                if (StompWrapper.instance.connected && 
                    _netConnection.connected)
                    OutgoingCalls.ready(_netConnection.nearID);
            }
        ]]>
    </fx:Script>
</s:Application>